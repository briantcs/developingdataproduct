nfit<-lm(count~spray-1)
nfit<-lm(count~spray-1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,C)
spray2<-relevel(InsectSprays$spray,sC)
spray2<-relevel(InsectSprays,sC)
spray2<-relevel(InsectSprays)
spray2<-relevel(InsectSprays,C)
?relevel
spray2<-relevel(InsectSprays$spray,ref='C')
fit2<-lm(count~spray,InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
coefficient (fit$coef[3])
fit$coef[3]
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
x[hunger$Sex=="Female"]
lmF <-lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <-lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth<-lm(Numeric,Year+Sex,hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
mean(fitno)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-fit
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit,
| which=2)
plot(fit, which=2)
sigma1
sigma1<-
fit
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
q()
a
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility)
mdl<-lm(Fertility~Agriculture,swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2<-lm(Fertility~.-Examination)
mdl2<-lm(Fertility~.-Examination,swiss)
vif(mdl2)
q()
data(mtcars)
data(mtcars)
fit <- lm(mpg ~ cyl + hp + wt + am, data = mtcars)
summary(fit)
æ‰‹(
q()
a
x<-c(140,138,150,148,135)
y<-c(132,135,151,146,130)
mean(x)
mean(y)
prop.test(42,100,p=.05)
prop.test(142.2,5,p=.05)
sd(y)
t=(mean(y)-mean(x))/(sd(y)/sqrt(5))
t
pt(t,df=4)
pt(t,df=4)/2
?t.test()
t.test(x,y,alternative=two.sided,conf.level=0.95)
t.test(x,y,two.sided,conf.level=0.95)
t.test(x,y,alternative='two.sided',conf.level=0.95)
library(swirl)
swirl()
.997*.001
(1-.985)8(1-.001)
(1-.985)*(1-.001)
(.997*.001)/((.997*.001+.014985))
sum(1:6)/6
expect_dice
dice_high
sum(expect_dice*dice_high)
sum(dice_high)
expect_dice(dice_high)
expect_dice(dice_low)
.5 *( E(X_hi)+E(X_lo) )
.5 *( expect_dice(X_hi)+expect_dice(X_lo) )
.5 *( expect_dice(dice_high)+expect_dice(dice_low) )
integrate(myfunc())
myfunc
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,mean)
apply(allsam,1,mean)
mean(smeans)
dice_sqe
dice_sqr
ex2_fair<-sum(dice_sqr*PDF)
ex2_fair<-sum(dice_sqr*dice_fair)
ex2_fair-3.5^2
sum(edh^2)-dice_high
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(n)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
q()
a
library(swirl)
swirl()
x1c<-simbias(x1)
x1c<-simbias(150)
x1c<-simbias()
apply(x1c,1,mean)
fit1<-lm(Fertility~.,swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3<-lm(Fertility~Agriculture,swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anva(fit1,fit3)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
anova()
anova(n/d)
anova(fit3)
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl<-glm(ravenWinNum~ravenScore,family=binomial,ravenData)
lodds<- predict(mdl, data.frame(ravenScore=c(0,3,6)
)
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
view(hits)
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda<- mdl$fitted.values[704]
qpois(.95,lambda)
mdl2<-pois(offset)
mdl2<-glm(offset)
mdl2<-glm(offset,1)
mdl2<-glm(1)
mdl2<-glm(offset)
mdl2<-glm(log(visits+1))
mdl2<-glm(visits+1,family=poisson(link=log))
?
)
0
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
q()
library(swirl)
swirl()
choose(5,2)
for (i in 3:5) choose(5,x)*(.8)^x*(.2)^(5-x)
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
lower.tail(2)
pbinom(2,5,lower.tail=FALSE)
pbinom(2,5)
pbinom(2)
pbinom(5)
info()
skip()
0
qnorm(.1)
0
qnorm(3,2)
qnorm(.975,mean=3,sd=2)
0
1.96*2+3
0
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
0
pnorm((1200-1020)/50,lower.tail=FALSE
)
0
qnorm(.75,mean=1020,sd=50)
0
pnorm(qnorm(.53))
qnorm(pnorm(.53))
0
ppois(3,2.5 * 4)
0
pbinom(5,1000,.01)
0
ppois(5,1000*.01)
q()
library(caret)
library(kernlab)
install.packages('kernlab')
library(kernlab)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
data(spam)
inTrain<-createDataPartition(y=spam$type,p=0.75,list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
set.seed(1)
modelFit<-train(type~.,data=training,method='glm')
install.packages('e1071')
modelFit<-train(type~.,data=training,method='glm')
modelFii
modelFit
modelFit$finalModel
modelFit$finalModel
predictions<-predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
modelFit<-train(type~.,data=training,method='gbm')
predictions<-predict(modelFit,newdata=testing)
predictions
confusionMatrix(predictions,testing$type)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData=data.frame(diagnosis,predictors)
dim(AlzheimerDisease)
names(AlzheimerDisease)
AlzheimerDisease
diagnosis
names(diagnosis)
dim(diagnosis)
names(predictors)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain<-createDataPartition(y=segmentationOriginal$Case,p=0.75,list=FALSE)
training=segmentationOriginal[inTrain,]
testing=segmentationOriginal[-inTrain,]
dim(training)
names(segmentationOriginal)
set.seed(125)
CART<-train(Case~.,data=training,method='rpart')
predi<-pred(CART,testing)
predi<-predict(CART,testing)
predi
install.packages('dplyr')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p=0.7, list=FALSE)
trainSample <- trainingData[inTrain, ]
testSample <- trainingData[-inTrain, ]
inTrain <- createDataPartition(y = segmentationOriginal$Case, p=0.7, list=FALSE)
trainSample <- segmentationOriginal[inTrain, ]
testSample <- segmentationOriginal[-inTrain, ]
set.seed(125)
library(rpart)
fit <- train(Case~., method="rpart", data=trainSample)
varImp(fit)
fit
summary(segmentationOriginal)
head(segmentationOriginal)
trainSample <- subset[segmentationOriginal$Case=Train]
trainSample <- subset(segmentationOriginal,Case="Train")
testSample <- subset(segmentationOriginal,Case="Test")
fit <- train(Class~., method="rpart", data=trainSample)
fit
varImp(fit)
+ConvexHullPerimRatioCh1+SkewIntenCh1
form<- class ~ FiberWidthCh1+TotalIntenCh2+ShapeP2ACh1+AvgIntenCh2+TotalIntenCh1+ConvexHullAreaRatioCh1+ConvexHullPerimRatioCh1+SkewIntenCh1
fit <- train(form, method="rf", data=trainSample, trControl=trainControl(method="cv",number=5), prox=TRUE,allowParallel=TRUE)
form<- class ~ FiberWidthCh1+TotalIntenCh2+ShapeP2ACh1+AvgIntenCh2+TotalIntenCh1+ConvexHullAreaRatioCh1+ConvexHullPerimRatioCh1+SkewIntenCh1
fit <- train(form, method="rf", data=trainSample, trControl=trainControl(method="cv",number=5), prox=TRUE,allowParallel=TRUE)
predictions <- predict(fit, newdata=testSample)
table(predictions, testSample$class)
predictions
predict(fit, newdata=c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2 ))
predict(fit, newdata=c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2, ))
predict(fit, newdata=c(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(fit, newdata=c(TotalIntench2 = 23000, FiberWidthCh1 = 10,PerimStatusCh1=2))
predict(fit, newdata=c(TotalIntench2 = 23000, FiberWidthCh1 = 10,PerimStatusCh1=2))
library(pgmm)
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
fit<-train(Area~.,method='rpart',data=olive)
fit<-train(Area~.,data=olive,method='rpart')
fit<-train(Area~.,method="rpart",data=olive)
fi
fit
newdata = as.data.frame(t(colMeans(olive)))
predictions <- predict(fit, newdata=newdata)
predictions
fit<-train(Area~.,method="rf",data=olive)
predictions <- predict(fit, newdata=newdata)
predictions
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages('ElemStatLearn')
data(vowel.train)
library(ElemStaLearn)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
head(vowel.train)
library(caret)
train1<-train(y~.,method='rf',data=vowel.train)
pred1<-predict(train1,data=vowel.test)
train1<-train(y~.,method='rf',data=vowel.train,ntree=50)
train1
train1$finalModel
pred1<-predic(train1,vowel.test)
pred1<-predict(train1,vowel.test)
confusionMatrix(vowel.test$y,pred1)
predi1
pred1
summary(pred1)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
install.packages(quantmod,dep=TRUE)
install.packages('quantmod',dep=TRUE)
source("http://www.rmetrics.org/Rmetrics.R")
install.Rmetrics()
install.packages("fPortfolio", type="source")
library(quantmod)
getSymbols("APPL")
getSymbols("AAPL")
dim(AAPL)
tail(AAPL)
chartSeries(AAPL,theme="white")
chartSeries(AAPL,theme="white")
library(quantmod)
getSymbols("AAPL")
dim(AAPL)
tail(AAPL)
getSymbols("AAPL",from="2013",to="2015")
getSymbols("AAPL",from="2013-01-01",to="2015-01-01")
getSymbols("AAPL",from="2013-01-01",to="2015-01-01")
getSymbols("UNRATE",src="FRED")
dim(UNRATE)
head(UNRATE,n=2)
chartSeries(UNRATE,them="white")
getSymbols("INTC",src="google")
head(INTC)
tail(INTC)
library(fBasics)
rtn=diff(log(AAPL$AAPL.Adjusted))
head(rtn)
chartSeries(rtn,theme="white")
getSymbols("DEXUSEU",src="FRED")
rtn=diff(log(DEXUSEU$DESUSEU))
rtn=diff(log(DEXUSEU$DEXUSEU))
chartSeries(rtn,theme="white")
chartSeries(DEXUSEU,theme="white")
install.packages("fBasics")
library(fBasic)
library(fBasics)
da=read.table("d-mmm-0111.txt",header=TRUE)
da=read.table("d-mmm-0111.txt",header=T)
da=read.table("m-ibmsp6709.txt",header=T)
x<-sample(17:23,20,TRUE)
x
mean(x)
runif(10,min=1,max=3)
mean(unif(min=-1,max=1))
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
setwd("~/")
library()
library(datasets)
?datasets
library(help = "datasets")
data(sleep)
names(sleep)
head(sleep)
str(sleep)
sleep
load("~/.RData")
marked()
masked()
da=read.table("q-gnp4710.txt",header=T)
p=c(1,2,3,4)
polyroot(p)
p=c(1,2)
polyroot(p)
p=c(1,-1.5,0.75)
polyroot(p)
1.5^2-4*0.75
sqrt(-.75)
sqrt(-0.75)
sqrt(0.75)
sqrt(0.75)/1.5
1.5/1.75
1.5/1.75*1.5-0.75
p=c(1,1,-0.25)
polyroot(p)
kings<-scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
kings
kingts<-ts(kings)
kingts
plot(kingts)
plot(kingts)
births <- scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
births
birthts<-ts(births,frequency=12)
birthts
birthts<-ts(births,frequency=12,start=c(1964,1))
birthts<-ts(births,frequency=12,start=c(1946,1))
birthts
birthts<-ts(births,frequency=12,start=c(1946,2))
birthts
birthts<-ts(births,frequency=12,start=c(1946,1))
plot(birthts)
plot.ts(birthts)
souvenir <- scan("http://robjhyndman.com/tsdldata/data/fancy.dat")
souvenirtimeseries <- ts(souvenir, frequency=12, start=c(1987,1))
plot.ts(souvenirtimeseries)
logsouvenirtimeseries <- log(souvenirtimeseries)
plot.ts(logsouvenirtimeseries)
birthstimeseriescomponents <- decompose(birthts)
birthstimeseriescomponents$seasonal
birthstimeseriescomponents$trend
plot(birthstimeseriescomponents)
rain <- scan("http://robjhyndman.com/tsdldata/hurst/precip1.dat",skip=1)
rainseries <- ts(rain,start=c(1813))
plot.ts(rainseries)
rain
setwd("C:/Users/user/Desktop/secga/Secga Web Apps/K mean clustering")
shiny::runApp()
library(rsconnect)
library(shinyapps)
shinyapps::setAccountInfo(name='secgadata', token='E93DA6510E8BDE2749F7797085200B12', secret='xd8QT4Bl7D05ueIpq3Inip86JtLBguCYYe4XRETA')
deployApp()
shinyapps::setAccountInfo(name='secgadata', token='E93DA6510E8BDE2749F7797085200B12', secret='xd8QT4Bl7D05ueIpq3Inip86JtLBguCYYe4XRETA')
library(rsconnect)
deployApp()
library(rsconnect)
shinyapps::setAccountInfo(name='secgadata', token='E93DA6510E8BDE2749F7797085200B12', secret='xd8QT4Bl7D05ueIpq3Inip86JtLBguCYYe4XRETA')
deployApp()
library(shinyapps)
shinyapps::deployApp()
shinyapps::showLogs()
deployApp(account="secgadata",server="shinyapps.io")
library(rsconnect)
shinyapps::setAccountInfo(name='secgadata', token='E93DA6510E8BDE2749F7797085200B12', secret='xd8QT4Bl7D05ueIpq3Inip86JtLBguCYYe4XRETA')
deployApp(account="secgadata",server="shinyapps.io")
deployApp(appName="Clustering")
deployApp(account="secgadata',appName="Clustering")
deployApp(account="secgadata",appName="Clustering")
